{"version":3,"file":"single-spa.js","sources":["../../src/applications/app.helpers.js","../../src/lifecycles/bootstrap.js","../../src/lifecycles/load.js","../../src/lifecycles/mount.js","../../src/lifecycles/unmount.js","../../src/start.js","../../src/navigations/navigator-events.js","../../src/navigations/reroute.js","../../src/applications/app.js"],"sourcesContent":["// 描述应用的整个状态\r\nexport const NOT_LOADED = 'NOT_LOADED' // 未加载，也是应用初始状态\r\nexport const LOADING_SOURCE_CODE = 'LOADING_SOURCE_CODE' // 加载资源\r\nexport const NOT_BOOTSTRAPPED = 'NOT_BOOTSTRAPPED' // 还没有调用bootstrap方法\r\nexport const BOOTSTRAPPING = 'BOOTSTRAPPING' // 启动中\r\nexport const NOT_MOUNTED = 'NOT_MOUNTED' // 还没有调用mount方法\r\nexport const MOUNTING = 'MOUNTING' // 正在挂载中\r\nexport const MOUNTED = 'MOUNTED' // 挂载完毕\r\nexport const UPDATING = 'UPDATING' // 更新中\r\nexport const UNMOUNTING = 'UN_MOUNTING' // 解除挂载\r\nexport const UNLOADING = 'UNLOADING' // 完全卸载中\r\n\r\nexport const LOAD_ERR = 'LOAD_ERR' // 加载失败\r\nexport const SKIP_BECAUSE_BROKEN = 'SKIP_BECAUSE_BROKEN' // 出错，代码异常\r\n\r\n// 当前应用是否被激活\r\nexport function isActive (app) {\r\n    return app.status  === MOUNTED\r\n}\r\n\r\n// 当前应用是否要被激活\r\nexport function shouldBeActive(app) { // 如果返回true就表示要被激活，那么就可以进行一系列初始化应用的操作\r\n    return app.activeWhen(window.location)\r\n}","import { BOOTSTRAPPING, NOT_BOOTSTRAPPED, NOT_MOUNTED } from \"../applications/app.helpers\";\r\n\r\nexport async function toBootstrapPromise(app) {\r\n    if (app.status !== NOT_BOOTSTRAPPED) {\r\n        return app\r\n    }\r\n\r\n    app.status = BOOTSTRAPPING\r\n    await app.bootstrap(app.customProps)\r\n    app.status = NOT_MOUNTED\r\n\r\n    return app\r\n}","import { LOADING_SOURCE_CODE, NOT_BOOTSTRAPPED } from \"../applications/app.helpers\";\r\n\r\nfunction flattenFnArray(fns) {\r\n    if (!Array.isArray(fns)) {\r\n        fns = [fns]\r\n    }\r\n\r\n    // 将数组中的方法组合成一个promise链来链式调用，多个方法组合成一个方法来调用\r\n    return props => fns.reduce((p, fn) => p.then(() => fn(props)), Promise.resolve())\r\n    // return function (props) {\r\n    //     return fns.reduce((p, fn) => p.then(() => fn(props)), Pormise.resolve())\r\n    // }\r\n}\r\n\r\nexport async function toLoadPromise(app) {\r\n    if (app.loadPromise) {\r\n        return app.loadPromise // 缓存机制\r\n    }\r\n\r\n    app.loadPromise = Promise.resolve().then(async () => {\r\n        app.status = LOADING_SOURCE_CODE\r\n\r\n        let { bootstrap, mount, unmount } = await app.loadApp(app.customProps)\r\n        app.status = NOT_BOOTSTRAPPED // 没有调用bootstrap方法\r\n\r\n        // 希望将多个promise组合在一起 compose\r\n        app.bootstrap = flattenFnArray(bootstrap)\r\n        app.mount = flattenFnArray(mount)\r\n        app.unmount = flattenFnArray(unmount)\r\n\r\n        delete app.loadPromise\r\n        return app\r\n    })\r\n\r\n    return app.loadPromise\r\n}\r\n\r\nexport async function toLoadPromiseOld(app) {\r\n\r\n    app.status = LOADING_SOURCE_CODE\r\n\r\n    let { bootstrap, mount, unmount } = await app.loadApp(app.customProps)\r\n    app.status = NOT_BOOTSTRAPPED // 没有调用bootstrap方法\r\n\r\n    // 希望将多个promise组合在一起 compose\r\n    app.bootstrap = flattenFnArray(bootstrap)\r\n    app.mount = flattenFnArray(mount)\r\n    app.unmount = flattenFnArray(unmount)\r\n\r\n    return app\r\n}","import { MOUNTED, MOUNTING, NOT_MOUNTED } from \"../applications/app.helpers\";\r\n\r\nexport async function toMountPromise(app) {\r\n    if(app.status !== NOT_MOUNTED) {\r\n        return app;\r\n    }\r\n\r\n    app.status = MOUNTING\r\n    await app.mount(app.customProps)\r\n    app.status = MOUNTED\r\n\r\n    return app \r\n}","import { MOUNTED, NOT_MOUNTED, UNMOUNTING } from \"../applications/app.helpers\";\r\n\r\nexport async function toUnmountPromise (app) {\r\n    // 如果当前应用没有被挂载，就什么也不做\r\n    if (app.status !== MOUNTED) {\r\n        return app\r\n    }\r\n\r\n    // 源码中这里还做了一些超时处理 \r\n    app.status = UNMOUNTING\r\n    await app.unmount(app.customProps)\r\n    app.status = NOT_MOUNTED\r\n    return app\r\n}","import { reroute } from \"./navigations/reroute\";\r\n\r\nexport let started = false\r\nexport function start() {\r\n\r\n    started = true\r\n    // 需要挂载应用\r\n    reroute () // 除了加载应用还需要去挂载应用\r\n}","\r\n\r\n// hashchange popstate\r\n\r\nimport { reroute } from \"./reroute\"\r\n\r\n\r\nexport const routingEventsListeningTo = ['hashchage', 'popstate']\r\n\r\n/**\r\n * !当应用加载完毕后，才会执行那些拦截到的事件\r\n */\r\nfunction urlReroute(e) {\r\n    reroute([], arguments) // 会根据路径重新加载不同的应用\r\n}\r\n\r\nconst captureEventListeners = { // 后续挂载的事件先暂存起来\r\n    hashchange: [],\r\n    popstate: []\r\n}\r\n\r\nwindow.addEventListener('hashchange', urlReroute)\r\nwindow.addEventListener('popstate', urlReroute)\r\n\r\nconst originalAddEventListener = window.addEventListener\r\nconst originalRemoveEventListener = window.removeEventListener\r\n\r\nwindow.addEventListener = function (eventName, fn) {\r\n    if(routingEventsListeningTo.indexOf(eventName) >= 0 &&\r\n        !captureEventListener[eventName].some(listener => listener === fn)\r\n    ) {\r\n        captureEventListeners[eventName].push(fn)\r\n        return\r\n    }\r\n\r\n    return originalAddEventListener.apply(this, arguments)\r\n}\r\n\r\nwindow.removeEventListener = function (eventName, fn) {\r\n    if (routingEventsListeningTo.indexOf(eventName) >= 0) {\r\n        captureEventListeners[eventName] = captureEventListeners[eventName].filters(l => l!== fn)\r\n        return;\r\n    }\r\n\r\n    return originalRemoveEventListener.apply(this, arguments)\r\n}\r\n\r\n// 如果是hash路由，hash变化时可以切换\r\n// 浏览器路由，浏览器路由时h5api的，如果切换时不会触发popstate\r\n\r\nfunction patchedUpdateState(updateState, methodName) {\r\n    return function () {\r\n        const urlBefore = window.location.href\r\n        updateState.apply(this, arguments); // 调用切换方法\r\n\r\n        const urlAfter = window.location.href\r\n\r\n        if (urlBefore !== urlAfter) {\r\n            // 重新加载应用 传入事件源\r\n            urlReroute(new PopStateEvent('popstate'))\r\n        }\r\n    }\r\n}\r\n\r\nwindow.history.pushState = patchedUpdateState(window.history.pushState, 'pushState')\r\nwindow.history.replaceState = patchedUpdateState(window.history.replaceState, 'replaceState')\r\n\r\n\r\n// 用户可能还会绑定自己的路由事件 vue\r\n\r\n// 当我们应用切换后，还需要处理原来的方法，需要在应用切换后再执行","import { getAppChanges } from \"../applications/app\";\r\nimport { toBootstrapPromise } from \"../lifecycles/bootstrap\";\r\nimport { toLoadPromise } from \"../lifecycles/load\";\r\nimport { toMountPromise } from \"../lifecycles/mount\";\r\nimport { toUnmountPromise } from \"../lifecycles/unmount\";\r\nimport { started } from \"../start\";\r\n\r\nimport './navigator-events'\r\n\r\n// 核心应用处理方法\r\nexport function reroute () {\r\n    // 1、需要获取要加载的应用\r\n    // 2、需要获取要被挂载的应用\r\n    // 3、哪些应用需要被卸载\r\n    const { appsToUnmount, appsToLoad, appsToMount } = getAppChanges()\r\n    console.log(appsToUnmount, appsToLoad, appsToMount)\r\n    \r\n    if (started) {\r\n        // console.log('start方法 已经被调用')\r\n        return performAppChanges(); // 根据路径来装载应用\r\n    } else {\r\n        // console.log('start方法 未被调用，那就调用registerApplication')\r\n\r\n        // 注册应用时，需要预先加载\r\n        return loadApps(); // 预加载应用\r\n    }\r\n\r\n    // 预加载应用\r\n    async function loadApps() {\r\n        let apps = await Promise.all(appsToLoad.map(toLoadPromise)) // 获取bootstrap、mount、unmount方法，并放到app上 \r\n        // mount 和 unmount 方法放到app上\r\n    }\r\n    // 根据路径来装载应用\r\n    async function performAppChanges() {\r\n        /**\r\n         * ! 路由切换也是这个原理\r\n         * 1. 先卸载不需要的应用\r\n         * 2. 去加载需要的应用 \r\n         */\r\n\r\n        // 这里不使用await，就是实现了并发卸载\r\n        let unmountPromises = appsToUnmount.map(toUnmountPromise) // 需要去卸载的app\r\n\r\n        appsToLoad.map(async (app) => {\r\n            // 将需要加载的应用拿到 => 加载 => 启动 => 挂载\r\n            app = await toLoadPromise(app)\r\n            app = await toBootstrapPromise(app)\r\n            return await toMountPromise(app)\r\n        })\r\n\r\n        appsToMount.map(async (app) => {\r\n            app = await toBootstrapPromise(app)\r\n            return toMountPromise(app)\r\n        })\r\n    }\r\n}\r\n\r\n// 这个流程是用于初始化操作的，但是还需要当路径切换时重新加载应用\r\n// 重写路由相关的方法","import { BOOTSTRAPPING, LOADING_SOURCE_CODE, MOUNTED, NOT_BOOTSTRAPPED, NOT_LOADED, NOT_MOUNTED, shouldBeActive, SKIP_BECAUSE_BROKEN } from \"./app.helpers\";\r\nimport { reroute } from '../navigations/reroute'\r\n\r\n/**\r\n * 注册应用\r\n * @param {*} appName 应用名称 \r\n * @param {*} loadApp 加载的应用\r\n * @param {*} activeWhen 当激活时会调用 loadApp\r\n * @param {*} customProps 自定义属性\r\n */\r\nconst apps = []; // 用来存放所有的应用\r\n\r\n// 维护应用所有的状态 状态机\r\nexport function registerApplication(appName, loadApp, activeWhen, customProps) {\r\n    apps.push({ // 这里就将应用加载好了\r\n        name: appName,\r\n        loadApp,\r\n        activeWhen,\r\n        customProps,\r\n        status: NOT_LOADED\r\n    })\r\n\r\n    reroute(); //加载应用 \r\n\r\n    console.log(apps)\r\n}\r\n\r\nexport function getAppChanges () {\r\n    const appsToUnmount = [] // 要卸载的app\r\n    const appsToLoad = [] // 要加载的app\r\n    const appsToMount = [] // 要挂在的app\r\n\r\n    apps.forEach(app => {\r\n        // 需不需要被加载\r\n        const appSholdBeActive = shouldBeActive(app)\r\n\r\n        switch (app.status) {\r\n            case NOT_LOADED:\r\n            case LOADING_SOURCE_CODE: {\r\n                if (appSholdBeActive) {\r\n                    appsToLoad.push(app)\r\n                }\r\n            } break;\r\n            case NOT_BOOTSTRAPPED:\r\n            case BOOTSTRAPPING:\r\n            case NOT_MOUNTED: {\r\n                if(appSholdBeActive) {\r\n                    appsToMount.push(app)\r\n                }\r\n            } break;\r\n            case MOUNTED: {\r\n                if (!appSholdBeActive) {\r\n                    appsToUnmount.push(app)\r\n                }\r\n            } break;\r\n        }\r\n    })\r\n\r\n    return { appsToUnmount, appsToLoad, appsToMount }\r\n}"],"names":[],"mappings":"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"}